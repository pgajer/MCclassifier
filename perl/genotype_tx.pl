#!/usr/bin/env perl

=head1 NAME

  genotype_tx.pl


=head1 DESCRIPTION

  Given a vicut directory with an updated taxon table, updated.tx, generated by
  update_tx.pl, and a cluster table file. For each species identify clusters
  where it is found and the number of sequences in each cluster.

  Taxons present in more than one cluster are renamed by adding a suffix
  'tRT_i', where i=1,2,3 .. and tRT is a shorthand for 'tentative ribotype'

  Here are a few examples (see spp_freq.summary in vicut_dir)

  Lactobacillus_paralimentarius
  116	9
  55	1

  Lactobacillus_buchneri
  142	14
  35	1

  Lactobacillus_similis
  146	4
  123	2

  Lactobacillus_johnsonii
  88	25
  84	2
  86	2
  76	1

  Lactobacillus_letivazi
  60	1
  56	1

  The first number is cluster ID and the second the number of sequences of the
  given taxons present in that cluster.


  The script generates the following files

  spp_freq.summary - with taxons present in more than one cluster, together with
  cluster ID and the number of the given sequences in that cluster.

  outlier.seqIDs - one column table sequence IDs identified as outliers.
                   I include sequence IDs of c-clusters as well.

  clstr_tbl.txt - three column table for taxons present in more than one cluster

  ann.tx - two column table of seqIDs and taxons name for all sequences
           that are not outliers and also are not present in <genus>_sp taxons.

  query.ids - one column table with sequence IDs of non-outlier sequences from <genus>_sp
              taxons.

  <txFile>_noOutliers.tx - taxonomy file used in the script as input with outliers sequences removed from it.


=head1 SYNOPSIS

  genotype_tx.pl -o <vicut dir> [Options]

=head1 OPTIONS

=over

=item B<--vicut-dir, -d>
  vicut output directory, that will be used also as an output directory. It is
  assumed that it contains an updated.tx file that was generated by
  update_tx_tree.pl.

=item B<--dry-run>
  Print commands to be executed, but do not execute them.

=item B<--debug>
  Prints system commands

=item B<-h|--help>
  Print help message and exit successfully.

=back


=head1 EXAMPLE

  cd /Users/pgajer/devel/MCclassifier/data/SILVA_123/Lactobacillaceae_ss100_dir

  genotype_tx.pl -d Lactobacillaceae_vicut_full_sate_dir

=cut

use strict;
use warnings;
use Pod::Usage;
use English qw( -no_match_vars );
use Getopt::Long qw(:config no_ignore_case no_auto_abbrev pass_through);
use File::Basename;

$OUTPUT_AUTOFLUSH = 1;

####################################################################
##                             OPTIONS
####################################################################

my $clSizeThld = 2; # sequences from clusters of this size of smaller are marked
		    # as outliers if the taxons is present in more than one
		    # cluster and it is not the first cluster (when ordering by
		    # size).
GetOptions(
  "vicut-dir|d=s"    => \my $vicutDir,
  "dry-run"          => \my $dryRun,
  "debug"            => \my $debug,
  "help|h!"          => \my $help,
  )
  or pod2usage(verbose => 0,exitstatus => 1);


if ($help)
{
  pod2usage(verbose => 2,exitstatus => 0);
  exit;
}

if (!$vicutDir)
{
  print "\n\nERROR: Missing vicut directory\n\n\n";
  pod2usage(verbose => 2,exitstatus => 0);
  exit;
}


####################################################################
##                               MAIN
####################################################################

## parsing cluster table
my $cltrFile = "$vicutDir/minNodeCut.cltrs";
print "[genotype_tx.pl] --- Parsing $cltrFile\n";
my %cltr = read2colTbl($cltrFile);

## parsing updated taxon table
my $txFile = "$vicutDir/updated.tx";
print "[genotype_tx.pl] --- Parsing $txFile\n";
my %tx = read2colTbl($txFile);

## generating taxons within cluster frequency table
print "[genotype_tx.pl] --- Generating taxons within cluster frequency table\n";

my %txCltrFreq; # $txCltrFreq{taxonsName}{clID} holds sequence IDs of the given taxons that
                # belong to cluster clID

for ( keys %tx )
{
  if (exists $cltr{$_})
  {
    push @{$txCltrFreq{$tx{$_}}{$cltr{$_}}}, $_;
  }
  else
  {
    warn "\n\nERROR: $_ does not exist in $cltrFile";
    stop("");
  }
}

## Generating file of taxons present in more than one cluster
print "[genotype_tx.pl] --- Updating taxonomy\n";
my $newTxFile = "$vicutDir/updated2.tx";
open TXOUT, ">$newTxFile" or die "Cannot open $newTxFile for writing: $OS_ERROR\n";
for my $tx ( keys %txCltrFreq )
{
  my %txCltrs = %{$txCltrFreq{$tx}};
  my $nClts = keys %txCltrs;
  my @cltrIDs = sort { scalar(@{$txCltrs{$b}}) <=> scalar(@{$txCltrs{$a}}) } keys %txCltrs;

  if ( $nClts > 1 )
  {
    my $clCount = 1;
    for my $clID ( @cltrIDs )
    {
      for my $seqID (@{$txCltrs{$clID}})
      {
	print TXOUT "$seqID\t$tx" . "_tRT_$clCount\n";
      }
      $clCount++;
    }
  }
  else
  {
    my $clID = shift @cltrIDs;
    for my $seqID (@{$txCltrs{$clID}})
    {
      print TXOUT "$seqID\t$tx\n";
    }
  }
}
close TXOUT;

####################################################################
##                               SUBS
####################################################################

# read two column table; create a table that assigns
# elements of the first column to the second column
sub read2colTbl{

  my $file = shift;

  if ( ! -f $file )
  {
    print "\n\nERROR: $file does not exist\n\n\n";
    exit;
  }

  my %tbl;
  open IN, "$file" or die "Cannot open $file for reading: $OS_ERROR\n";
  foreach (<IN>)
  {
    chomp;
    my ($id, $t) = split /\s+/,$_;
    $tbl{$id} = $t;
  }
  close IN;

  return %tbl;
}

exit;
