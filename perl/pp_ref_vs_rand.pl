#!/usr/bin/env perl

=head1 NAME

  pp_ref_vs_rand.pl

=head1 DESCRIPTION

  Comparing distributions posterior probabilities of a given MC model over the
  model's ref sequences vs. random sequences drawn from the model

=head1 SYNOPSIS

  pp_ref_vs_rand.pl -i <group prefix> -s <species name> -l <rand seq length> -n <number of random seq's>

=head1 OPTIONS

=over

=item B<--group-prefix, -i>
  Groups prefix.

=item B<--num-rand-seqs, -n>
  Number of random sequences to be generated from each model.

=item B<--random-seq-length, -l>
  Length of random sequences

=item B<--show-tree>
  Open the pdf file with a plot of density functions of posterior probabilities of ref and random sequences.

=item B<--verbose, -v>
  Prints content of some output files.

=item B<--debug>
  Prints system commands

=item B<--dry-run>
  Print commands to be executed, but do not execute them.

=item B<-h|--help>
  Print help message and exit successfully.

=back

=head1 EXAMPLE

  pp_ref_vs_rand.pl --show-tree -i Firmicutes_group_6_V3V4 -s Lactobacillus_plantarum -l 429 -n 228

=cut

use strict;
use warnings;
use Pod::Usage;
use English qw( -no_match_vars );
use Getopt::Long qw(:config no_ignore_case no_auto_abbrev pass_through);

$OUTPUT_AUTOFLUSH = 1;

####################################################################
##                             OPTIONS
####################################################################

GetOptions(
  "group-prefix|i=s"  => \my $grPrefix,
  "num-rand-seqs|n=i" => \my $nRand,
  "rand-seqs-len|l=i" => \my $randSeqLen,
  "sel-model|s=s"     => \my $selModel,
  "show-tree"         => \my $showTree,
  "igs"               => \my $igs,
  "johanna"           => \my $johanna,
  "verbose|v"         => \my $verbose,
  "debug"             => \my $debug,
  "dry-run"           => \my $dryRun,
  "help|h!"           => \my $help,
  )
  or pod2usage(verbose => 0,exitstatus => 1);


if ($help)
{
  pod2usage(verbose => 2,exitstatus => 0);
  exit;
}

if (!$grPrefix)
{
  warn "\n\n\tERROR: Missing group prefix";
  print "\n\n";
  pod2usage(verbose => 2,exitstatus => 0);
  exit 1;
}
elsif (!$nRand)
{
  warn "\n\n\tERROR: Missing number of random seq's";
  print "\n\n";
  pod2usage(verbose => 2,exitstatus => 0);
  exit;
}
elsif (!$randSeqLen)
{
  warn "\n\n\tERROR: Missing random sequence's length";
  print "\n\n";
  pod2usage(verbose => 2,exitstatus => 0);
  exit;
}
elsif (!$selModel)
{
  warn "\n\n\tERROR: Missing selected model's name";
  print "\n\n";
  pod2usage(verbose => 2,exitstatus => 0);
  exit;
}

####################################################################
##                               MAIN
####################################################################

#my $quietStr = "--quiet";
my $quietStr = "";

my $grDir = $grPrefix . "_dir";

if ( ! -d $grDir )
{
  warn "\n\n\tERROR: $grDir does not exist";
  print "\n\n";
  exit 1;
}

my $tmpDir = $grDir . "/temp_dir";
my $cmd = "mkdir -p $tmpDir";
print "\tcmd=$cmd\n" if $dryRun || $debug;
system($cmd) == 0 or die "system($cmd) failed: $?" if !$dryRun;

chdir $grDir;
print "--- Changed dir to $grDir\n";

## from http://stackoverflow.com/questions/18532026/how-to-append-system-date-to-a-filename-in-perl
my @now = localtime();
my $timeStamp = sprintf("%04d-%02d-%02d_%02d_%02d_%02d",
			$now[5]+1900, $now[4]+1, $now[3],
			$now[2],      $now[1],   $now[0]);

my $mcDir   = $grPrefix . "_MC_models_dir";
my $randDir = $grPrefix . "_MC_rand_seqs_dir";

print "--- Generating posterior probabilities of the ref seq's of $selModel w/r $selModel model\n";
my $refFaFile = $mcDir . "/$selModel" . ".fa";
my $refPPsFile = $mcDir . "/$selModel" . ".postProbs";
my $cmd = "pp_wr_selected_models -d $mcDir -i $refFaFile -s $selModel -o $refPPsFile";
print "\tcmd=$cmd\n" if $dryRun || $debug;
system($cmd) == 0 or die "system($cmd) failed with exit code: $?" if !$dryRun;

print "--- Generating random sequences from the $selModel model\n";
$cmd = "buildMC --random-seq-length $randSeqLen --random-sample-size $nRand -t $mcDir/spp_paths.txt -k 8 -d $mcDir -o $randDir";
print "\tcmd=$cmd\n" if $dryRun || $debug;
system($cmd) == 0 or die "system($cmd) failed with exit code: $?" if !$dryRun;

# Generated files in $randDir
# rsample.fa	rsample.tx

my $bigRandFaFile = $randDir . "/rsample.fa";
my $bigRandTxFile = $randDir . "/rsample.tx";

print "--- Selecting seq IDs of $selModel\n";
my $randSeqIDs = $randDir . "/$selModel" . "_model_rand.seqIDs";
$cmd = "rm -f $randSeqIDs; grep $selModel $bigRandTxFile > $randSeqIDs";
print "\tcmd=$cmd\n" if $dryRun || $debug;
system($cmd) == 0 or die "system($cmd) failed with exit code: $?" if !$dryRun;

print "--- Selecting random seq's generated by $selModel\n";
my $randFaFile = $randDir . "/$selModel" . "_rand_seqs.fa";
$cmd = "select_seqs.pl --quiet -s $randSeqIDs -i $bigRandFaFile -o $randFaFile";
print "\tcmd=$cmd\n" if $dryRun || $debug;
system($cmd) == 0 or die "system($cmd) failed with exit code: $?" if !$dryRun;

print "--- Generating posterior probabilities of the random seq's of $selModel w/r $selModel model\n";
my $randPPsFile = $mcDir . "/$selModel" . "_rand_seqs.postProbs";
$cmd = "pp_wr_selected_models -d $mcDir -i $randFaFile -s $selModel -o $randPPsFile";
print "\tcmd=$cmd\n" if $dryRun || $debug;
system($cmd) == 0 or die "system($cmd) failed with exit code: $?" if !$dryRun;

my $pdfFile = $randDir . "/$selModel" . "_pp_ref_vs_rand.pdf";
my $rscriptFile = $randDir . "/$selModel" . "_pp_ref_vs_rand.R";
plot_pp_ref_vs_rand($pdfFile, $rscriptFile);

if ( $showTree && $OSNAME eq "darwin")
{
  $cmd = "open $pdfFile";
  print "\tcmd=$cmd\n" if $dryRun || $debug;
  system($cmd) == 0 or die "system($cmd) failed:$?\n" if !$dryRun;
}


print "\n\n\tR script that generated the plot is in $grDir/$rscriptFile\n\n";

####################################################################
##                               SUBS
####################################################################

## plot density functions of posterior probabilities of ref and random sequences
sub plot_pp_ref_vs_rand
{
  my ($pdfFile, $rscriptFile) = @_;

  my $Rscript = qq~

ref.pp <- read.table(\"$refPPsFile\", header=F)[,2]
rand.pp <- read.table(\"$randPPsFile\", header=F)[,2]

d.ref <- density(ref.pp)
d.rand <- density(rand.pp)

ymax <- max(c(d.ref\$y, d.rand\$y))
xmin <- min(c(d.ref\$x, d.rand\$x))

pdf(\"$pdfFile\", width=6, height=6)
op <- par(mar=c(3.5, 3.5, 3.5, 1), mgp=c(2,0.5,0),tcl = -0.3)
title <- paste(\"$selModel\", \" (n=\", length(ref.pp), \")\", sep=\"\")
plot(d.ref, ylim=c(0,ymax), xlim=c(xmin, 0), las=1, xlab=\"Model log10 posterior probabilities\", main=title)
lines(d.rand, col=2)
legend(\"topleft\", legend=c(\"ref\", \"rand\"), lty=1, col=1:2, inset=0.05)
par(op)
dev.off()

~;

  run_R_script( $Rscript, $rscriptFile );
}

# execute an R-script
sub run_R_script
{
  my ($Rscript, $inFile, $noErrorCheck) = @_;

  open OUT, ">$inFile",  or die "cannot write to $inFile: $!\n";
  print OUT "$Rscript";
  close OUT;

  my $outFile = $inFile . "out";
  my $cmd = "$R CMD BATCH --no-save --no-restore-data $inFile $outFile";
  system($cmd) == 0 or die "system($cmd) failed with exit code: $?";

  if (!$noErrorCheck)
  {
    open IN, "$outFile" or die "Cannot open $outFile for reading: $OS_ERROR\n";
    my $exitStatus = 1;
    foreach my $line (<IN>)
    {
      if ( $line =~ /Error/ )
      {
	print "R script crashed at\n$line";
	print "check $outFile for details\n";
	$exitStatus = 0;
	exit 1;
      }
    }
    close IN;
  }
}


exit;
