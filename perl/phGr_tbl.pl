#!/usr/bin/env perl

=head1 NAME

  phGr_tbl.pl

=head1 DESCRIPTION

  Identifying sequences present in cx_hb_rdp.lineage and the phylo-type table thld_5500_phGr_tbl.txt

=head1 SYNOPSIS

  phGr_tbl.pl -i <input file> -o <output file> [Options]

=head1 OPTIONS

=over

=item B<--input-file, -i>
  Input file.

=item B<--output-file, -o>
  Output file.

=item B<--verbose, -v>
  Prints content of some output files.

=item B<--debug>
  Prints system commands

=item B<--dry-run>
  Print commands to be executed, but do not execute them.

=item B<-h|--help>
  Print help message and exit successfully.

=back


=head1 EXAMPLE

  phGr_tbl.pl

=cut

use strict;
use warnings;
use diagnostics;
use Pod::Usage;
use English qw( -no_match_vars );

$OUTPUT_AUTOFLUSH = 1;

####################################################################
##                               Main
####################################################################

my %ogTbl = parse_og_file( "/Users/pgajer/projects/PECAN/data/phylo_groups/v0.3/cx_hb_rdp_FL_5500_phGr_dir/thld_5500_og_tbl.txt" );

my %liTbl = read_tbl( "/Users/pgajer/projects/PECAN/data/Banfield_contax/FL/cx_hb_rdp.lineage" );

my $outFile = "/Users/pgajer/projects/PECAN/data/phylo_groups/v0.3/cx_hb_rdp_FL_5500_phGr_dir/thld_5500_phGr_tbl_v2.txt";
open OUT, ">$outFile" or die "Cannot open $outFile for writing: $OS_ERROR\n";

my $inFile = "/Users/pgajer/projects/PECAN/data/phylo_groups/v0.3/cx_hb_rdp_FL_5500_phGr_dir/thld_5500_phGr_tbl.txt";
open IN, "$inFile" or die "Cannot open $inFile for reading: $OS_ERROR\n";
my $count = 0;
for ( <IN> )
{
  chomp;
  my ($id, $phGr) = split /\s+/;
  if ( exists $liTbl{$id} )
  {
    print OUT "$id\t$phGr\n";
    $count++;
  }
  elsif ( exists $ogTbl{$id} )
  {
    print "\n\n\tERROR: outgroup element $id not in liTbl\n\n";
    exit 1;
  }
}
close OUT;
close IN;

print "\nNumber of elements in the output file $count\n";
print "Output written to $outFile\n\n";

####################################################################
##                               SUBS
####################################################################

# Parsing outgroup file generated by cut_tree
sub parse_og_file
{
  my $ogFile = shift;

  my %ogTbl;
  open IN, "$ogFile" or die "Cannot open $ogFile for reading: $OS_ERROR";
  for ( <IN> )
  {
    chomp;
    my ($phGrIdx, $ogGe) = split /\s+/;
    my $phGr = "phGr$phGrIdx";
    $ogTbl{$phGr} = $ogGe;
  }
  close IN;

  return %ogTbl;
}

# read two column table; create a table that assigns
# elements of the first column to the second column
sub read_tbl
{
  my ($file, $skipHeader) = @_;

  if ( ! -e $file )
  {
    warn "\n\n\tERROR in readTbl(): $file does not exist";
    print "\n\n";
    exit 1;
  }

  my %tbl;
  open IN, "$file" or die "Cannot open $file for reading: $OS_ERROR\n";
  if ( $skipHeader )
  {
    my $header = <IN>;
  }
  foreach (<IN>)
  {
    chomp;
    my ($id, $t) = split /\s+/,$_;
    $tbl{$id} = $t;
  }
  close IN;

  return %tbl;
}


exit 0;
